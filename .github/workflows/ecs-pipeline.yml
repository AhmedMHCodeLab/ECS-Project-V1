name: ECS Threat Composer CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ecs-threat-composer
  ECS_SERVICE: ecs-threat-composer-dev-service
  ECS_CLUSTER: ecs-threat-composer-dev-cluster
  TF_WORKING_DIR: ./infra

jobs:
  # Infrastructure validation and planning
  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    # Run on all pushes to main, pull requests, or manual triggers
    if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
      
      - name: Terraform Format Check
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check -recursive
        continue-on-error: true
      
      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init
      
      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate -no-color
      
      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -no-color
        continue-on-error: true
  
  # Infrastructure deployment
  terraform-apply:
    name: Apply Terraform
    runs-on: ubuntu-latest
    needs: [terraform-validate]
    # Run on main branch pushes or manual triggers
    if: (github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
      
      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init
      
      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve
  
  # Build and deploy the application
  build-and-deploy:
    name: Build and Deploy App
    runs-on: ubuntu-latest
    # Run after terraform jobs, regardless of their outcome
    if: always() && (github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch'))
    needs: [terraform-validate]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Check infrastructure status
        id: check-infra
        run: |
          echo "Checking if ECS cluster exists..."
          if ! aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} --query 'clusters[0].[status]' --output text 2>/dev/null | grep -q ACTIVE; then
            echo "::warning::ECS cluster ${{ env.ECS_CLUSTER }} not found or not active."
            echo "Remember to run terraform apply first to create the infrastructure!"
            echo "INFRASTRUCTURE_EXISTS=false" >> $GITHUB_ENV
          else
            echo "ECS cluster exists and is active."
            echo "INFRASTRUCTURE_EXISTS=true" >> $GITHUB_ENV
          fi
      
      - name: Login to ECR
        id: login-ecr
        if: env.INFRASTRUCTURE_EXISTS == 'true'
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build and push Docker image
        if: env.INFRASTRUCTURE_EXISTS == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./app
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Update ECS service
        if: env.INFRASTRUCTURE_EXISTS == 'true'
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment
      
      - name: Wait for deployment
        if: env.INFRASTRUCTURE_EXISTS == 'true'
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}
      
      - name: Infrastructure Missing Notice
        if: env.INFRASTRUCTURE_EXISTS == 'false'
        run: |
          echo "::warning::Deployment skipped because infrastructure is missing."
          echo "Run terraform apply to create the required resources."
          echo "The Docker image was not built or pushed."
