name: Deploy
# This workflow builds a Docker image, pushes it to Amazon ECR, and deploys it to an Amazon ECS service.
on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ecs-threat-composer
  ECS_SERVICE: ecs-threat-composer-dev-service
  ECS_CLUSTER: ecs-threat-composer-dev-cluster

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Check infrastructure status
      id: check-infra
      run: |
        echo "Checking if ECS cluster exists..."
        if ! aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} --query 'clusters[0].[status]' --output text 2>/dev/null | grep -q ACTIVE; then
          echo "::warning::ECS cluster ${{ env.ECS_CLUSTER }} not found or not active."
          echo "Remember to run terraform apply first to create the infrastructure!"
          echo "INFRASTRUCTURE_EXISTS=false" >> $GITHUB_ENV
        else
          echo "ECS cluster exists and is active."
          echo "INFRASTRUCTURE_EXISTS=true" >> $GITHUB_ENV
        fi

    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./app
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Update ECS service
      if: env.INFRASTRUCTURE_EXISTS == 'true'
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --force-new-deployment

    - name: Wait for deployment
      if: env.INFRASTRUCTURE_EXISTS == 'true'
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }}
          
    - name: Infrastructure Missing Notice
      if: env.INFRASTRUCTURE_EXISTS == 'false'
      run: |
        echo "::warning::Deployment skipped because infrastructure is missing."
        echo "Run the terraform workflow or 'terraform apply' to create the required resources."
        echo "The Docker image was still built and pushed to ECR for future use."