name: Deploy to ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ecs-threat-composer
  ECS_SERVICE: ecs-threat-composer-dev-service
  ECS_CLUSTER: ecs-threat-composer-dev-cluster
  TASK_DEFINITION: ecs-threat-composer-dev-task

jobs:
  check-infrastructure:
    name: Check Infrastructure Status
    runs-on: ubuntu-latest
    outputs:
      infra_exists: ${{ steps.check-ecs.outputs.exists }}
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Check if ECS cluster exists
        id: check-ecs
        run: |
          if aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} --query "clusters[?status=='ACTIVE'].clusterName" --output text | grep -q "${{ env.ECS_CLUSTER }}"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "ECS cluster ${{ env.ECS_CLUSTER }} exists and is active."
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "ECS cluster ${{ env.ECS_CLUSTER }} does not exist or is not active."
          fi

  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: check-infrastructure
    if: needs.check-infrastructure.outputs.infra_exists == 'false'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
      
      - name: Terraform Init
        working-directory: ./infra
        run: terraform init
      
      - name: Terraform Apply
        working-directory: ./infra
        run: terraform apply -auto-approve
      
      - name: Wait for ECS cluster to be active
        run: |
          echo "Waiting for ECS cluster to become active..."
          while ! aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} --query "clusters[?status=='ACTIVE'].clusterName" --output text | grep -q "${{ env.ECS_CLUSTER }}"; do
            echo "Waiting for ECS cluster to be active..."
            sleep 10
          done
          echo "ECS cluster is now active."

  build-and-deploy:
    name: Build and Deploy
    needs: [check-infrastructure]
    runs-on: ubuntu-latest
    # Always run this job, whether we deployed infrastructure or not
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          cd app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEFINITION }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          force-new-deployment: true
      
      - name: Verify deployment
        run: |
          echo "Checking deployment status..."
          aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query "services[0].deployments[0].status" --output text
          
          # Wait for the deployment to complete
          while [ "$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query "services[0].deployments[0].rolloutState" --output text)" != "COMPLETED" ]; do
            echo "Deployment in progress..."
            sleep 10
          done
          echo "Deployment completed successfully!"
